
//#include <cstdlib>  //c standard library 
#include <stdlib.h>     /* atoi */

//#include "ros/ros.h"
#include "std_msgs/String.h"
#include "geometry_msgs/PoseStamped.h"
#include <sstream>
#include <Eigen/Eigen>
#include <tf/transform_broadcaster.h>
#include <tf/transform_datatypes.h>

#include "snowy.h"

int main(int argc, char **argv)
{
    ros::init(argc, argv, "uav_position_controller");
    ros::NodeHandle n;
//    n= Snowy::nh;
    ros::Publisher uavPosePublisher = n.advertise<geometry_msgs::PoseStamped>("/mavros/setpoint_position/local", 1000);
    ros::Rate loop_rate(50);
    geometry_msgs::PoseStamped newPose;
    double x = 0.5;
    double y = 0.5;
    double z = 1.0;
    
    double xx = atof(argv[1]);
    double yy = atof(argv[2]);
    //double zz = atof(argv[3]);
    ROS_INFO("\n x= %f \n y= %f \n z= %f", xx, yy, z);

    Snowy X;
    X.snowyy();
	    
    while (ros::ok())
    {
        newPose.pose.position.x  = xx;
        newPose.pose.position.y  = yy;
        newPose.pose.position.z  = z;
        //ROS_INFO("ChkPoint 1");

        newPose.header.stamp=ros::Time::now();
        newPose.header.frame_id="world";
        //ROS_INFO("ChkPoint 2");
        tf::Quaternion quaternion = tf::createQuaternionFromRPY(0,0,0);
        //ROS_INFO("ChkPoint 3");
        newPose.pose.orientation.w = quaternion.w();
        newPose.pose.orientation.x = quaternion.x();
        newPose.pose.orientation.y = quaternion.y();
        newPose.pose.orientation.z = quaternion.z();
        //ROS_INFO("ChkPoint 4");
        uavPosePublisher.publish(newPose);
        //ROS_INFO("ChkPoint 5");
        ros::spinOnce();
        loop_rate.sleep();
    }
    return 0;
}
